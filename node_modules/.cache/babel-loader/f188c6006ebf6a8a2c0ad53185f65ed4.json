{"ast":null,"code":"var _jsxFileName = \"D:\\\\project react\\\\vsnt\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nconst {\n  https\n} = require('follow-redirects');\n\nconst languages = {\n  auto: 'Automatic',\n  af: 'Afrikaans',\n  sq: 'Albanian',\n  am: 'Amharic',\n  ar: 'Arabic',\n  hy: 'Armenian',\n  az: 'Azerbaijani',\n  eu: 'Basque',\n  be: 'Belarusian',\n  bn: 'Bengali',\n  bs: 'Bosnian',\n  bg: 'Bulgarian',\n  ca: 'Catalan',\n  ceb: 'Cebuano',\n  ny: 'Chichewa',\n  'zh-cn': 'Chinese Simplified',\n  'zh-tw': 'Chinese Traditional',\n  co: 'Corsican',\n  hr: 'Croatian',\n  cs: 'Czech',\n  da: 'Danish',\n  nl: 'Dutch',\n  en: 'English',\n  eo: 'Esperanto',\n  et: 'Estonian',\n  tl: 'Filipino',\n  fi: 'Finnish',\n  fr: 'French',\n  fy: 'Frisian',\n  gl: 'Galician',\n  ka: 'Georgian',\n  de: 'German',\n  el: 'Greek',\n  gu: 'Gujarati',\n  ht: 'Haitian Creole',\n  ha: 'Hausa',\n  haw: 'Hawaiian',\n  iw: 'Hebrew',\n  hi: 'Hindi',\n  hmn: 'Hmong',\n  hu: 'Hungarian',\n  is: 'Icelandic',\n  ig: 'Igbo',\n  id: 'Indonesian',\n  ga: 'Irish',\n  it: 'Italian',\n  ja: 'Japanese',\n  jw: 'Javanese',\n  kn: 'Kannada',\n  kk: 'Kazakh',\n  km: 'Khmer',\n  ko: 'Korean',\n  ku: 'Kurdish (Kurmanji)',\n  ky: 'Kyrgyz',\n  lo: 'Lao',\n  la: 'Latin',\n  lv: 'Latvian',\n  lt: 'Lithuanian',\n  lb: 'Luxembourgish',\n  mk: 'Macedonian',\n  mg: 'Malagasy',\n  ms: 'Malay',\n  ml: 'Malayalam',\n  mt: 'Maltese',\n  mi: 'Maori',\n  mr: 'Marathi',\n  mn: 'Mongolian',\n  my: 'Myanmar (Burmese)',\n  ne: 'Nepali',\n  no: 'Norwegian',\n  ps: 'Pashto',\n  fa: 'Persian',\n  pl: 'Polish',\n  pt: 'Portuguese',\n  ma: 'Punjabi',\n  ro: 'Romanian',\n  ru: 'Russian',\n  sm: 'Samoan',\n  gd: 'Scots Gaelic',\n  sr: 'Serbian',\n  st: 'Sesotho',\n  sn: 'Shona',\n  sd: 'Sindhi',\n  si: 'Sinhala',\n  sk: 'Slovak',\n  sl: 'Slovenian',\n  so: 'Somali',\n  es: 'Spanish',\n  su: 'Sundanese',\n  sw: 'Swahili',\n  sv: 'Swedish',\n  tg: 'Tajik',\n  ta: 'Tamil',\n  te: 'Telugu',\n  th: 'Thai',\n  tr: 'Turkish',\n  uk: 'Ukrainian',\n  ur: 'Urdu',\n  uz: 'Uzbek',\n  vi: 'Vietnamese',\n  cy: 'Welsh',\n  xh: 'Xhosa',\n  yi: 'Yiddish',\n  yo: 'Yoruba',\n  zu: 'Zulu'\n};\n\nfunction getCode(desiredLang) {\n  if (!desiredLang) {\n    return false;\n  }\n\n  desiredLang = desiredLang.toLowerCase();\n\n  if (languages[desiredLang]) {\n    return desiredLang;\n  }\n\n  const langKey = Object.keys(languages).find(key => {\n    if (typeof languages[key] !== 'string') {\n      return false;\n    }\n\n    return languages[key].toLowerCase() === desiredLang;\n  });\n  return langKey || false;\n}\n\nfunction isSupported(desiredLang) {\n  return Boolean(getCode(desiredLang));\n}\n\nfunction retryPost(url, options = {}, retries = 10, backoff = 300) {\n  const retryCodes = new Set([408, 429, 500, 502, 503, 504, 522, 524]);\n  return new Promise((resolve, reject) => {\n    try {\n      https.request(url, {\n        method: 'POST',\n        rejectUnauthorized: false,\n        ...options\n      }, response => {\n        let data = '';\n        const {\n          statusCode\n        } = response;\n\n        if (statusCode < 200 || statusCode > 299) {\n          if (retries > 0 && retryCodes.has(statusCode)) {\n            setTimeout(() => {\n              resolve(retryPost(url, options, retries - 1, backoff * 2));\n            }, backoff);\n          } else {\n            reject(new Error(response));\n          }\n        } else {\n          response.on('data', d => {\n            data += d;\n          });\n          response.on('end', () => {\n            resolve(JSON.parse(data));\n          });\n        }\n      }).end();\n    } catch (error) {\n      if (retries > 0) {\n        setTimeout(() => {\n          resolve(retryPost(url, options, retries - 1, backoff * 2));\n        }, backoff);\n      } else {\n        reject(error);\n      }\n    }\n  });\n}\n\nfunction translate(text, options) {\n  options = options || {};\n  let error;\n  [options.from, options.to].forEach(lang => {\n    if (lang && !isSupported(lang)) {\n      error = new Error();\n      error.code = 400;\n      error.message = 'The language \\'' + lang + '\\' is not supported';\n    }\n  });\n\n  if (error) {\n    return new Promise((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  options.suffix = options.suffix || 'com';\n  options.from = options.from || 'auto';\n  options.to = options.to || 'en';\n  options.from = getCode(options.from);\n  options.to = getCode(options.to);\n  const url = 'https://translate.google.' + options.suffix + '/translate_a/single';\n  const searchParameters = new URLSearchParams([['client', 'gtx'], ['sl', options.from], ['tl', options.to], ['hl', options.to], ['dt', 'at'], ['dt', 'bd'], ['dt', 'ex'], ['dt', 'ld'], ['dt', 'md'], ['dt', 'qca'], ['dt', 'rw'], ['dt', 'rm'], ['dt', 'ss'], ['dt', 't'], ['ie', 'UTF-8'], ['oe', 'UTF-8'], ['otf', 1], ['ssel', 0], ['tsel', 0], ['kc', 7], ['q', text]]);\n  return retryPost(url + '?' + searchParameters.toString(), {\n    agent: options.agent\n  }, options.retries, options.backoff).then(body => {\n    const result = {\n      text: '',\n      from: {\n        language: {\n          didYouMean: false,\n          iso: ''\n        },\n        text: {\n          autoCorrected: false,\n          value: '',\n          didYouMean: false\n        }\n      },\n      raw: ''\n    };\n\n    if (options.raw) {\n      result.raw = body;\n    }\n\n    body[0].forEach(o => {\n      if (o[0]) {\n        result.text += o[0];\n      }\n    });\n\n    if (body[2] === body[8][0][0]) {\n      result.from.language.iso = body[2];\n    } else {\n      result.from.language.didYouMean = true;\n      result.from.language.iso = body[8][0][0];\n    }\n\n    if (body[7] && body[7][0]) {\n      let translatedText = body[7][0];\n      translatedText = translatedText.replace(/<b><i>/g, '[');\n      translatedText = translatedText.replace(/<\\/i><\\/b>/g, ']');\n      result.from.text.value = translatedText;\n\n      if (body[7][5] === true) {\n        result.from.text.autoCorrected = true;\n      } else {\n        result.from.text.didYouMean = true;\n      }\n    }\n\n    return result;\n  }).catch(error => {\n    throw error;\n  });\n}\n\nmodule.exports = {\n  translate,\n  languages,\n  getCode,\n  isSupported\n};","map":{"version":3,"sources":["D:/project react/vsnt/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","unregister","https","require","languages","auto","af","sq","am","ar","hy","az","eu","be","bn","bs","bg","ca","ceb","ny","co","hr","cs","da","nl","en","eo","et","tl","fi","fr","fy","gl","ka","de","el","gu","ht","ha","haw","iw","hi","hmn","hu","is","ig","id","ga","it","ja","jw","kn","kk","km","ko","ku","ky","lo","la","lv","lt","lb","mk","mg","ms","ml","mt","mi","mr","mn","my","ne","no","ps","fa","pl","pt","ma","ro","ru","sm","gd","sr","st","sn","sd","si","sk","sl","so","es","su","sw","sv","tg","ta","te","th","tr","uk","ur","uz","vi","cy","xh","yi","yo","zu","getCode","desiredLang","toLowerCase","langKey","Object","keys","find","key","isSupported","Boolean","retryPost","url","options","retries","backoff","retryCodes","Set","Promise","resolve","reject","request","method","rejectUnauthorized","response","data","statusCode","has","setTimeout","Error","on","d","JSON","parse","end","error","translate","text","from","to","forEach","lang","code","message","suffix","searchParameters","URLSearchParams","toString","agent","then","body","result","language","didYouMean","iso","autoCorrected","value","raw","o","translatedText","replace","catch","module","exports"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst {https} = require('follow-redirects');\n\nconst languages = {\n    auto: 'Automatic',\n    af: 'Afrikaans',\n    sq: 'Albanian',\n    am: 'Amharic',\n    ar: 'Arabic',\n    hy: 'Armenian',\n    az: 'Azerbaijani',\n    eu: 'Basque',\n    be: 'Belarusian',\n    bn: 'Bengali',\n    bs: 'Bosnian',\n    bg: 'Bulgarian',\n    ca: 'Catalan',\n    ceb: 'Cebuano',\n    ny: 'Chichewa',\n    'zh-cn': 'Chinese Simplified',\n    'zh-tw': 'Chinese Traditional',\n    co: 'Corsican',\n    hr: 'Croatian',\n    cs: 'Czech',\n    da: 'Danish',\n    nl: 'Dutch',\n    en: 'English',\n    eo: 'Esperanto',\n    et: 'Estonian',\n    tl: 'Filipino',\n    fi: 'Finnish',\n    fr: 'French',\n    fy: 'Frisian',\n    gl: 'Galician',\n    ka: 'Georgian',\n    de: 'German',\n    el: 'Greek',\n    gu: 'Gujarati',\n    ht: 'Haitian Creole',\n    ha: 'Hausa',\n    haw: 'Hawaiian',\n    iw: 'Hebrew',\n    hi: 'Hindi',\n    hmn: 'Hmong',\n    hu: 'Hungarian',\n    is: 'Icelandic',\n    ig: 'Igbo',\n    id: 'Indonesian',\n    ga: 'Irish',\n    it: 'Italian',\n    ja: 'Japanese',\n    jw: 'Javanese',\n    kn: 'Kannada',\n    kk: 'Kazakh',\n    km: 'Khmer',\n    ko: 'Korean',\n    ku: 'Kurdish (Kurmanji)',\n    ky: 'Kyrgyz',\n    lo: 'Lao',\n    la: 'Latin',\n    lv: 'Latvian',\n    lt: 'Lithuanian',\n    lb: 'Luxembourgish',\n    mk: 'Macedonian',\n    mg: 'Malagasy',\n    ms: 'Malay',\n    ml: 'Malayalam',\n    mt: 'Maltese',\n    mi: 'Maori',\n    mr: 'Marathi',\n    mn: 'Mongolian',\n    my: 'Myanmar (Burmese)',\n    ne: 'Nepali',\n    no: 'Norwegian',\n    ps: 'Pashto',\n    fa: 'Persian',\n    pl: 'Polish',\n    pt: 'Portuguese',\n    ma: 'Punjabi',\n    ro: 'Romanian',\n    ru: 'Russian',\n    sm: 'Samoan',\n    gd: 'Scots Gaelic',\n    sr: 'Serbian',\n    st: 'Sesotho',\n    sn: 'Shona',\n    sd: 'Sindhi',\n    si: 'Sinhala',\n    sk: 'Slovak',\n    sl: 'Slovenian',\n    so: 'Somali',\n    es: 'Spanish',\n    su: 'Sundanese',\n    sw: 'Swahili',\n    sv: 'Swedish',\n    tg: 'Tajik',\n    ta: 'Tamil',\n    te: 'Telugu',\n    th: 'Thai',\n    tr: 'Turkish',\n    uk: 'Ukrainian',\n    ur: 'Urdu',\n    uz: 'Uzbek',\n    vi: 'Vietnamese',\n    cy: 'Welsh',\n    xh: 'Xhosa',\n    yi: 'Yiddish',\n    yo: 'Yoruba',\n    zu: 'Zulu'\n};\n\nfunction getCode(desiredLang) {\n    if (!desiredLang) {\n        return false;\n    }\n\n    desiredLang = desiredLang.toLowerCase();\n\n    if (languages[desiredLang]) {\n        return desiredLang;\n    }\n\n    const langKey = Object.keys(languages).find(key => {\n        if (typeof languages[key] !== 'string') {\n            return false;\n        }\n\n        return languages[key].toLowerCase() === desiredLang;\n    });\n\n    return langKey || false;\n}\n\nfunction isSupported(desiredLang) {\n    return Boolean(getCode(desiredLang));\n}\n\nfunction retryPost(url, options = {}, retries = 10, backoff = 300) {\n    const retryCodes = new Set([408, 429, 500, 502, 503, 504, 522, 524]);\n    return new Promise((resolve, reject) => {\n        try {\n            https.request(url, {\n                method: 'POST',\n                rejectUnauthorized: false,\n                ...options\n            }, response => {\n                let data = '';\n                const {statusCode} = response;\n                if (statusCode < 200 || statusCode > 299) {\n                    if (retries > 0 && retryCodes.has(statusCode)) {\n                        setTimeout(() => {\n                            resolve(retryPost(url, options, retries - 1, backoff * 2));\n                        }, backoff);\n                    } else {\n                        reject(new Error(response));\n                    }\n                } else {\n                    response.on('data', d => {\n                        data += d;\n                    });\n                    response.on('end', () => {\n                        resolve(JSON.parse(data));\n                    });\n                }\n            }).end();\n        } catch (error) {\n            if (retries > 0) {\n                setTimeout(() => {\n                    resolve(retryPost(url, options, retries - 1, backoff * 2));\n                }, backoff);\n            } else {\n                reject(error);\n            }\n        }\n    });\n}\n\nfunction translate(text, options) {\n    options = options || {};\n\n    let error;\n    [options.from, options.to].forEach(lang => {\n        if (lang && !isSupported(lang)) {\n            error = new Error();\n            error.code = 400;\n            error.message = 'The language \\'' + lang + '\\' is not supported';\n        }\n    });\n    if (error) {\n        return new Promise((resolve, reject) => {\n            reject(error);\n        });\n    }\n\n    options.suffix = options.suffix || 'com';\n    options.from = options.from || 'auto';\n    options.to = options.to || 'en';\n\n    options.from = getCode(options.from);\n    options.to = getCode(options.to);\n\n    const url = 'https://translate.google.' + options.suffix + '/translate_a/single';\n    const searchParameters = new URLSearchParams(\n        [\n            ['client', 'gtx'],\n            ['sl', options.from],\n            ['tl', options.to],\n            ['hl', options.to],\n            ['dt', 'at'],\n            ['dt', 'bd'],\n            ['dt', 'ex'],\n            ['dt', 'ld'],\n            ['dt', 'md'],\n            ['dt', 'qca'],\n            ['dt', 'rw'],\n            ['dt', 'rm'],\n            ['dt', 'ss'],\n            ['dt', 't'],\n            ['ie', 'UTF-8'],\n            ['oe', 'UTF-8'],\n            ['otf', 1],\n            ['ssel', 0],\n            ['tsel', 0],\n            ['kc', 7],\n            ['q', text]\n        ]\n    );\n    return retryPost(url + '?' + searchParameters.toString(), {\n        agent: options.agent\n    }, options.retries, options.backoff)\n        .then(body => {\n            const result = {\n                text: '',\n                from: {\n                    language: {\n                        didYouMean: false,\n                        iso: ''\n                    },\n                    text: {\n                        autoCorrected: false,\n                        value: '',\n                        didYouMean: false\n                    }\n                },\n                raw: ''\n            };\n\n            if (options.raw) {\n                result.raw = body;\n            }\n\n            body[0].forEach(o => {\n                if (o[0]) {\n                    result.text += o[0];\n                }\n            });\n\n            if (body[2] === body[8][0][0]) {\n                result.from.language.iso = body[2];\n            } else {\n                result.from.language.didYouMean = true;\n                result.from.language.iso = body[8][0][0];\n            }\n\n            if (body[7] && body[7][0]) {\n                let translatedText = body[7][0];\n\n                translatedText = translatedText.replace(/<b><i>/g, '[');\n                translatedText = translatedText.replace(/<\\/i><\\/b>/g, ']');\n\n                result.from.text.value = translatedText;\n\n                if (body[7][5] === true) {\n                    result.from.text.autoCorrected = true;\n                } else {\n                    result.from.text.didYouMean = true;\n                }\n            }\n\n            return result;\n        }).catch(error => {\n            throw error;\n        });\n}\n\nmodule.exports = {\n    translate,\n    languages,\n    getCode,\n    isSupported\n};\n"]},"metadata":{},"sourceType":"module"}