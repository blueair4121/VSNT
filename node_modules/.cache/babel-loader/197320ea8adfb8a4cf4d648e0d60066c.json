{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/bradley/Code/teamgantt/react-auto-translate/src/translator.tsx\";\nimport React, { createContext } from 'react';\n\nvar defaultHandler = function defaultHandler() {};\n\nexport var TranslateContext = createContext(defaultHandler);\nexport var LanguageContext = createContext('en');\nexport default function Translator(_ref) {\n  var to = _ref.to,\n      from = _ref.from,\n      cacheProvider = _ref.cacheProvider,\n      children = _ref.children,\n      googleApiKey = _ref.googleApiKey;\n\n  var getCachedTranslation = function getCachedTranslation(value) {\n    if (!cacheProvider) {\n      return undefined;\n    }\n\n    return cacheProvider.get(to, value);\n  };\n\n  var setCachedTranslation = function setCachedTranslation(value, translation) {\n    if (!cacheProvider) {\n      return;\n    }\n\n    cacheProvider.set(to, value, translation);\n  };\n\n  var getGoogleTranslation = function getGoogleTranslation(value) {\n    var response, jsonResponse;\n    return _regeneratorRuntime.async(function getGoogleTranslation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://translation.googleapis.com/language/translate/v2?source=\" + from + \"&target=\" + to + \"&key=\" + googleApiKey + \"&q=\" + value + \"&format=text\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            jsonResponse = _context.sent;\n            return _context.abrupt(\"return\", jsonResponse.data.translations[0].translatedText);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", undefined);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n\n  var handleTranslationAsync = function handleTranslationAsync(value, setTranslation) {\n    var cachedTranslation, translatedText;\n    return _regeneratorRuntime.async(function handleTranslationAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(to === from)) {\n              _context2.next = 3;\n              break;\n            }\n\n            setTranslation(value);\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            cachedTranslation = getCachedTranslation(value);\n\n            if (!cachedTranslation) {\n              _context2.next = 7;\n              break;\n            }\n\n            setTranslation(cachedTranslation);\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getGoogleTranslation(value));\n\n          case 9:\n            translatedText = _context2.sent;\n\n            if (!translatedText) {\n              _context2.next = 14;\n              break;\n            }\n\n            setCachedTranslation(value, translatedText);\n            setTranslation(translatedText);\n            return _context2.abrupt(\"return\");\n\n          case 14:\n            setTranslation(value);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  return React.createElement(TranslateContext.Provider, {\n    value: handleTranslationAsync,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    }\n  }, React.createElement(LanguageContext.Provider, {\n    value: to,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    }\n  }, children));\n}","map":{"version":3,"sources":["translator.tsx"],"names":["defaultHandler","TranslateContext","createContext","LanguageContext","to","from","cacheProvider","children","googleApiKey","getCachedTranslation","setCachedTranslation","getGoogleTranslation","response","fetch","jsonResponse","handleTranslationAsync","setTranslation","cachedTranslation","translatedText"],"mappings":"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","sourcesContent":["import React, {createContext} from 'react';\n\nexport type TranslationHandler = {\n  (value: string, setTranslation: (translation: string) => void): void;\n};\n\nconst defaultHandler: TranslationHandler = () => {};\n\nexport const TranslateContext: React.Context<\n  TranslationHandler\n> = createContext(defaultHandler);\nexport const LanguageContext: React.Context<string> = createContext('en');\n\ntype CacheProvider = {\n  get: (language: string, key: string) => string | undefined;\n  set: (language: string, key: string, translation: string) => void;\n};\n\ntype Props = {\n  to: string;\n  from: string;\n  cacheProvider?: CacheProvider;\n  children: string;\n  googleApiKey: string;\n};\n\nexport default function Translator({\n  to,\n  from,\n  cacheProvider,\n  children,\n  googleApiKey,\n}: Props): JSX.Element {\n  const getCachedTranslation = (value: string): string | undefined => {\n    if (!cacheProvider) {\n      return undefined;\n    }\n\n    return cacheProvider.get(to, value);\n  };\n\n  const setCachedTranslation = (value: string, translation: string): void => {\n    if (!cacheProvider) {\n      return;\n    }\n\n    cacheProvider.set(to, value, translation);\n  };\n\n  const getGoogleTranslation = async (\n    value: string\n  ): Promise<string | undefined> => {\n    try {\n      const response = await fetch(\n        `https://translation.googleapis.com/language/translate/v2?source=${from}&target=${to}&key=${googleApiKey}&q=${value}&format=text`\n      );\n\n      const jsonResponse = await response.json();\n\n      return jsonResponse.data.translations[0].translatedText;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  const handleTranslationAsync: TranslationHandler = async (\n    value,\n    setTranslation\n  ) => {\n    // no need to translate!\n    if (to === from) {\n      setTranslation(value);\n      return;\n    }\n\n    // attempt cached translation first\n    const cachedTranslation = getCachedTranslation(value);\n    if (cachedTranslation) {\n      setTranslation(cachedTranslation);\n      return;\n    }\n\n    // attempt google translation next\n    const translatedText = await getGoogleTranslation(value);\n    if (translatedText) {\n      setCachedTranslation(value, translatedText);\n      setTranslation(translatedText);\n      return;\n    }\n\n    // default to value\n    setTranslation(value);\n  };\n\n  return (\n    <TranslateContext.Provider value={handleTranslationAsync}>\n      <LanguageContext.Provider value={to}>{children}</LanguageContext.Provider>\n    </TranslateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}