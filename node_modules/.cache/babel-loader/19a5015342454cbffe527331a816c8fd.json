{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationServiceClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v3/translation_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./translation_service_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3\n */\n\n\nclass TranslationServiceClient {\n  /**\n   * Construct an instance of TranslationServiceClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateResponse');\n    const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateMetadata');\n    const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.Glossary');\n    const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.CreateGlossaryMetadata');\n    const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryResponse');\n    const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryMetadata');\n    this.descriptors.longrunning = {\n      batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n      createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n      deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3.TranslationService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.translationServiceStub) {\n      return this.translationServiceStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.translation.v3.TranslationService.\n\n\n    this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.translation.v3.TranslationService') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.translation.v3.TranslationService, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const translationServiceStubMethods = ['translateText', 'detectLanguage', 'getSupportedLanguages', 'batchTranslateText', 'createGlossary', 'listGlossaries', 'getGlossary', 'deleteGlossary'];\n\n    for (const methodName of translationServiceStubMethods) {\n      const callPromise = this.translationServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.translationServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-translation'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Translates input text and returns translated text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string[]} request.contents\n   *   Required. The content of the input in string format.\n   *   We recommend the total content be less than 30k codepoints.\n   *   Use BatchTranslateText for larger text.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input text if\n   *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n   *   listed in Language Support. If the source language isn't specified, the API\n   *   attempts to identify the source language automatically and returns the\n   *   source language within the response.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   text, set to one of the language codes listed in Language Support.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or\n   *   custom glossaries.\n   *\n   *   Models and glossaries must be within the same region (have same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   For global (non-regionalized) requests, use `location-id` `global`.\n   *   For example,\n   *   `projects/{project-number-or-id}/locations/global/models/general/nmt`.\n   *\n   *   If missing, the system decides which google base model to use.\n   * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be\n   *   within the same region (have the same location-id) as the model, otherwise\n   *   an INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3.TranslateTextResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.translateText(request);\n   */\n\n\n  translateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.translateText(request, options, callback);\n  }\n  /**\n   * Detects the language of text within a request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Only models within the same region (has same location-id) can be used.\n   *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The language detection model to be used.\n   *\n   *   Format:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}`\n   *\n   *   Only one language detection model is currently supported:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`.\n   *\n   *   If not specified, the default model is used.\n   * @param {string} request.content\n   *   The content of the input stored as a string.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3.DetectLanguageResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.detectLanguage(request);\n   */\n\n\n  detectLanguage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.detectLanguage(request, options, callback);\n  }\n  /**\n   * Returns a list of supported languages for translation.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for AutoML models.\n   *\n   *   Only models within the same region (have same location-id) can be used,\n   *   otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.displayLanguageCode]\n   *   Optional. The language to use to return localized, human readable names\n   *   of supported languages. If missing, then display names are not returned\n   *   in a response.\n   * @param {string} [request.model]\n   *   Optional. Get supported languages of this model.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   Returns languages supported by the specified model.\n   *   If missing, we get supported languages of Google general base (PBMT) model.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3.SupportedLanguages}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSupportedLanguages(request);\n   */\n\n\n  getSupportedLanguages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSupportedLanguages(request, options, callback);\n  }\n  /**\n   * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to retrieve.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getGlossary(request);\n   */\n\n\n  getGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getGlossary(request, options, callback);\n  }\n  /**\n   * Translates a large volume of text in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can\n   * use google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a call. Must refer to a caller's project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. Source language code.\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. Specify up to 10 language codes here.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 1000.\n   *   The total content size should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3.OutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied for translation.\n   *   It's keyed by target language code.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.batchTranslateText(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  batchTranslateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchTranslateText(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `batchTranslateText()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkBatchTranslateTextProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkBatchTranslateTextProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateText, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Creates a glossary and returns the long-running operation. Returns\n   * NOT_FOUND, if the project doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project name.\n   * @param {google.cloud.translation.v3.Glossary} request.glossary\n   *   Required. The glossary to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.createGlossary(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  createGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `createGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkCreateGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkCreateGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Deletes a glossary, or cancels glossary construction\n   * if the glossary isn't created yet.\n   * Returns NOT_FOUND, if the glossary doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to delete.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.deleteGlossary(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  deleteGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `deleteGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkDeleteGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkDeleteGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listGlossaries(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listGlossaries(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3.Glossary} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listGlossariesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);\n  }\n  /**\n   * Equivalent to `listGlossaries`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Glossary]{@link google.cloud.translation.v3.Glossary}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listGlossariesAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listGlossariesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls['listGlossaries'], request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified glossary resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} glossary\n   * @returns {string} Resource name string.\n   */\n\n\n  glossaryPath(project, location, glossary) {\n    return this.pathTemplates.glossaryPathTemplate.render({\n      project: project,\n      location: location,\n      glossary: glossary\n    });\n  }\n  /**\n   * Parse the project from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n  }\n  /**\n   * Parse the location from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n  }\n  /**\n   * Parse the glossary from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the glossary.\n   */\n\n\n  matchGlossaryFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n\n\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.translationServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.TranslationServiceClient = TranslationServiceClient;","map":{"version":3,"sources":["D:/project react/vsnt/node_modules/@google-cloud/translate/build/src/v3/translation_service_client.js"],"names":["Object","defineProperty","exports","value","TranslationServiceClient","gax","require","path","gapicConfig","google_gax_1","version","constructor","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","port","clientConfig","fallback","window","fetch","assign","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","pathTemplates","glossaryPathTemplate","PathTemplate","locationPathTemplate","listGlossaries","PageDescriptor","protoFilesRoot","protobuf","Root","fromJSON","loadSync","operationsClient","lro","grpc","undefined","batchTranslateTextResponse","lookup","batchTranslateTextMetadata","createGlossaryResponse","createGlossaryMetadata","deleteGlossaryResponse","deleteGlossaryMetadata","batchTranslateText","LongrunningDescriptor","decode","bind","createGlossary","deleteGlossary","_defaults","constructSettings","innerApiCalls","initialize","translationServiceStub","createStub","lookupService","google","cloud","translation","v3","TranslationService","translationServiceStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","getProjectId","callback","translateText","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","parent","detectLanguage","getSupportedLanguages","getGlossary","name","checkBatchTranslateTextProgress","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","checkCreateGlossaryProgress","checkDeleteGlossaryProgress","listGlossariesStream","callSettings","CallSettings","createStream","listGlossariesAsync","asyncIterate","glossaryPath","project","location","glossary","render","matchProjectFromGlossaryName","glossaryName","match","matchLocationFromGlossaryName","matchGlossaryFromGlossaryName","locationPath","matchProjectFromLocationName","locationName","matchLocationFromLocationName","close","resolve"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,aAAa,CAACC,OAAD,EAAUC,iBAAV,EAA6BH,QAA7B,EAAuC;AAChDE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIE,OAAJ;;AACA,QAAI,OAAOD,iBAAP,KAA6B,UAA7B,IAA2CH,QAAQ,KAAKzC,SAA5D,EAAuE;AACnEyC,MAAAA,QAAQ,GAAGG,iBAAX;AACAC,MAAAA,OAAO,GAAG,EAAV;AACH,KAHD,MAIK;AACDA,MAAAA,OAAO,GAAGD,iBAAV;AACH;;AACDC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1G,GAAG,CAAC2G,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGA,SAAKjC,UAAL;AACA,WAAO,KAAKD,aAAL,CAAmB0B,aAAnB,CAAiCC,OAAjC,EAA0CE,OAA1C,EAAmDJ,QAAnD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TranslationServiceClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v3/translation_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./translation_service_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3\n */\nclass TranslationServiceClient {\n    /**\n     * Construct an instance of TranslationServiceClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries'),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateResponse');\n        const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateMetadata');\n        const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.Glossary');\n        const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.CreateGlossaryMetadata');\n        const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryResponse');\n        const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryMetadata');\n        this.descriptors.longrunning = {\n            batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n            createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n            deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3.TranslationService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.translationServiceStub) {\n            return this.translationServiceStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.translation.v3.TranslationService.\n        this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.translation.v3.TranslationService')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.translation.v3.TranslationService, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const translationServiceStubMethods = [\n            'translateText',\n            'detectLanguage',\n            'getSupportedLanguages',\n            'batchTranslateText',\n            'createGlossary',\n            'listGlossaries',\n            'getGlossary',\n            'deleteGlossary',\n        ];\n        for (const methodName of translationServiceStubMethods) {\n            const callPromise = this.translationServiceStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.translationServiceStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-translation',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Translates input text and returns translated text.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string[]} request.contents\n     *   Required. The content of the input in string format.\n     *   We recommend the total content be less than 30k codepoints.\n     *   Use BatchTranslateText for larger text.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {string} [request.sourceLanguageCode]\n     *   Optional. The BCP-47 language code of the input text if\n     *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n     *   listed in Language Support. If the source language isn't specified, the API\n     *   attempts to identify the source language automatically and returns the\n     *   source language within the response.\n     * @param {string} request.targetLanguageCode\n     *   Required. The BCP-47 language code to use for translation of the input\n     *   text, set to one of the language codes listed in Language Support.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}` or\n     *   `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Non-global location is required for requests using AutoML models or\n     *   custom glossaries.\n     *\n     *   Models and glossaries must be within the same region (have same\n     *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The `model` type requested for this translation.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   For global (non-regionalized) requests, use `location-id` `global`.\n     *   For example,\n     *   `projects/{project-number-or-id}/locations/global/models/general/nmt`.\n     *\n     *   If missing, the system decides which google base model to use.\n     * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n     *   Optional. Glossary to be applied. The glossary must be\n     *   within the same region (have the same location-id) as the model, otherwise\n     *   an INVALID_ARGUMENT (400) error is returned.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3.TranslateTextResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.translateText(request);\n     */\n    translateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.translateText(request, options, callback);\n    }\n    /**\n     * Detects the language of text within a request.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Only models within the same region (has same location-id) can be used.\n     *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The language detection model to be used.\n     *\n     *   Format:\n     *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}`\n     *\n     *   Only one language detection model is currently supported:\n     *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`.\n     *\n     *   If not specified, the default model is used.\n     * @param {string} request.content\n     *   The content of the input stored as a string.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3.DetectLanguageResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.detectLanguage(request);\n     */\n    detectLanguage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.detectLanguage(request, options, callback);\n    }\n    /**\n     * Returns a list of supported languages for translation.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}` or\n     *   `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Non-global location is required for AutoML models.\n     *\n     *   Only models within the same region (have same location-id) can be used,\n     *   otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.displayLanguageCode]\n     *   Optional. The language to use to return localized, human readable names\n     *   of supported languages. If missing, then display names are not returned\n     *   in a response.\n     * @param {string} [request.model]\n     *   Optional. Get supported languages of this model.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   Returns languages supported by the specified model.\n     *   If missing, we get supported languages of Google general base (PBMT) model.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3.SupportedLanguages}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getSupportedLanguages(request);\n     */\n    getSupportedLanguages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getSupportedLanguages(request, options, callback);\n    }\n    /**\n     * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to retrieve.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3.Glossary}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getGlossary(request);\n     */\n    getGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getGlossary(request, options, callback);\n    }\n    /**\n     * Translates a large volume of text in asynchronous batch mode.\n     * This function provides real-time output as the inputs are being processed.\n     * If caller cancels a request, the partial results (for an input file, it's\n     * all or nothing) may still be available on the specified output location.\n     *\n     * This call returns immediately and you can\n     * use google.longrunning.Operation.name to poll the status of the call.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Location to make a call. Must refer to a caller's project.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   The `global` location is not supported for batch translation.\n     *\n     *   Only AutoML Translation models or glossaries within the same region (have\n     *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n     *   error is returned.\n     * @param {string} request.sourceLanguageCode\n     *   Required. Source language code.\n     * @param {string[]} request.targetLanguageCodes\n     *   Required. Specify up to 10 language codes here.\n     * @param {number[]} [request.models]\n     *   Optional. The models to use for translation. Map's key is target language\n     *   code. Map's value is model name. Value can be a built-in general model,\n     *   or an AutoML Translation model.\n     *\n     *   The value format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   If the map is empty or a specific model is\n     *   not requested for a language pair, then default google model (nmt) is used.\n     * @param {number[]} request.inputConfigs\n     *   Required. Input configurations.\n     *   The total number of files matched should be <= 1000.\n     *   The total content size should be <= 100M Unicode codepoints.\n     *   The files must use UTF-8 encoding.\n     * @param {google.cloud.translation.v3.OutputConfig} request.outputConfig\n     *   Required. Output configuration.\n     *   If 2 input configs match to the same file (that is, same input path),\n     *   we don't generate output for duplicate inputs.\n     * @param {number[]} [request.glossaries]\n     *   Optional. Glossaries to be applied for translation.\n     *   It's keyed by target language code.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.batchTranslateText(request);\n     * const [response] = await operation.promise();\n     */\n    batchTranslateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.batchTranslateText(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `batchTranslateText()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkBatchTranslateTextProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkBatchTranslateTextProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateText, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Creates a glossary and returns the long-running operation. Returns\n     * NOT_FOUND, if the project doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project name.\n     * @param {google.cloud.translation.v3.Glossary} request.glossary\n     *   Required. The glossary to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.createGlossary(request);\n     * const [response] = await operation.promise();\n     */\n    createGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createGlossary(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createGlossary()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkCreateGlossaryProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkCreateGlossaryProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createGlossary, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Deletes a glossary, or cancels glossary construction\n     * if the glossary isn't created yet.\n     * Returns NOT_FOUND, if the glossary doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to delete.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.deleteGlossary(request);\n     * const [response] = await operation.promise();\n     */\n    deleteGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteGlossary(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `deleteGlossary()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkDeleteGlossaryProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkDeleteGlossaryProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteGlossary, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Filtering is not supported yet, and the parameter currently has no effect.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3.Glossary}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listGlossariesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listGlossaries(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listGlossaries(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Filtering is not supported yet, and the parameter currently has no effect.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3.Glossary} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listGlossariesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listGlossariesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);\n    }\n    /**\n     * Equivalent to `listGlossaries`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Filtering is not supported yet, and the parameter currently has no effect.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Glossary]{@link google.cloud.translation.v3.Glossary}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listGlossariesAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listGlossariesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls['listGlossaries'], request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified glossary resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} glossary\n     * @returns {string} Resource name string.\n     */\n    glossaryPath(project, location, glossary) {\n        return this.pathTemplates.glossaryPathTemplate.render({\n            project: project,\n            location: location,\n            glossary: glossary,\n        });\n    }\n    /**\n     * Parse the project from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n    }\n    /**\n     * Parse the location from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n    }\n    /**\n     * Parse the glossary from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the glossary.\n     */\n    matchGlossaryFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.translationServiceStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.TranslationServiceClient = TranslationServiceClient;\n//# sourceMappingURL=translation_service_client.js.map"]},"metadata":{},"sourceType":"script"}